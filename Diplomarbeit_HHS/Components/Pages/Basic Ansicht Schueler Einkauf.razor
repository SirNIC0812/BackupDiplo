@page "/einkauf"
@using System.Net.Http;
@using System.Net.Security;
@using System.Security.Cryptography.X509Certificates;
@using System.Text.Json;
@using System.Net.Http.Headers;
@using System.Configuration;
@using Microsoft.Extensions.Configuration
@using System.Text
@using System.Net.Http.Json;

<link href="style/style.css" rel="stylesheet" />

<body>
	<header>
		<table>
			<thead>
				<tr>
					<th><h1>Einkauf</h1></th>
					<td rowspan="2"><img src="img/Logo_BHAK10.jpg" alt="Schullogo" class="Bild" /></td>
				</tr>
			</thead>
			<tfoot>
			</tfoot>
			<tbody>
				<tr>
					<td colspan="2">Herzlich Willkommen bei der Einkaufsabteilung für die Übungsfirmen!</td>
				</tr>
			</tbody>
		</table>
	</header>
	<nav>
	</nav>
	<section>
		<article>
			<table>
				<thead>
				</thead>
				<tfoot>
				</tfoot>
				<tbody>
					<tr>
						<td>Username: </td>
						<td>
							<input type="text" class="form-control" id="Username" @bind="Username">
						</td>
					</tr>
					<tr>
						<td>Passwort: </td>
						<td>
							<input type="text" class="form-control" id="Passwort" @bind="Passwort">
						</td>
					</tr>
					<tr>
						<td>
							Der User hat sich mit (@AusgabeUser) angemeldet.
						</td>
						<td><button id="Anmelden" @onclick="TestenMitLogin">Login</button></td>
						<td><button @onclick="GetBestellung">Get Bestellung</button></td>
						<td><button @onclick="TestenLogOut">Logout</button></td>
						<p>@OutputGetPostPutDelete</p>
					</tr>
				</tbody>
			</table>
		</article>
	</section>
</body>

@code {
	private string? Username;
	private string? Passwort;
	private string? OutputGetPostPutDelete;
	private string? AusgabeUser;

	public class Login
	{
		public string? username { get; set; }
		public string? passwort { get; set; }
	}

	public class BestellungInhalt
	{
		public int Id { get; set; }
		public string? Unternehmen { get; set; }
	}

	HttpClientHandler handler = new HttpClientHandler
	{
		ServerCertificateCustomValidationCallback = (HttpRequestMessage? message, X509Certificate2? certificate, X509Chain? chain, SslPolicyErrors errors) => true
	};

	public async Task<bool> LoginVorgang(string username, string password)
	{
		string LoginURL = URLs.URLLogin;

		HttpClient client = new HttpClient(handler);

		Login login = new Login { username = username, passwort = password };
		string jsonData = JsonSerializer.Serialize(login);
		var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
		HttpResponseMessage response = await client.PostAsync(LoginURL, content);

		if (response.IsSuccessStatusCode)
		{
			string responseBody = await response.Content.ReadAsStringAsync();

			var tokenSpeichern = await response.Content.ReadAsStringAsync();
			await SecureStorage.SetAsync("authToken", tokenSpeichern);
			return true;
		}
		else
		{
			OutputGetPostPutDelete = "Fehler: " + response.StatusCode;
			return false;
		}
	}

	public async Task<List<BestellungInhalt>> HoleAlleBestellungen()
	{

		string HotelBookingURL = URLs.URLEinkaufBestellung;
		var token = await SecureStorage.GetAsync("authToken");

		HttpClient GetBookingHotel = new HttpClient(handler);
		GetBookingHotel.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

		HttpResponseMessage response = await GetBookingHotel.GetAsync(HotelBookingURL);

		if (response.IsSuccessStatusCode)
		{
			string responseBody = await response.Content.ReadAsStringAsync();
			List<BestellungInhalt> bookings = JsonSerializer.Deserialize<List<BestellungInhalt>>(responseBody);

			Console.WriteLine(Convert.ToString(response));
			return bookings;
		}
		else
		{
			string test = "\nFehlermeldung: " + response.StatusCode;
			return null;
		}
	}

	private int versuche = 1;

	private async void TestenMitLogin()
	{

		bool newLogin = await LoginVorgang(Username, Passwort);

		var token = await SecureStorage.GetAsync("authToken");
		string janein = "";
		if (token != null)
		{
			janein = "ja";
		}
		else
		{
			janein = "nein";
		}

		AusgabeUser = "LoginDIP: " + URLs.URLLogin + " || URLBEstellung: " + URLs.URLEinkaufBestellung + " || Token: " + janein;
		AusgabeUser += "\n Username: " + Username + " || Passwort: " + Passwort;

		if (newLogin == true)
		{
			OutputGetPostPutDelete = "Sie haben sich erfolgreich angemeldet!";
		}
		else
		{
			if (versuche <= 3)
			{
				OutputGetPostPutDelete = "Sie haben einen falschen Benutzer verwendet!Bitte versuchen Sie es erneut. Versuche: " + versuche;
				versuche++;
			}
			else
			{
				OutputGetPostPutDelete = "Sie haben zu oft einen falschen Benutzer verwendet! Bitte versuchen Sie sich nicht mehr anzumelden.";
			}
		}
	}

	private async void GetBestellung()
	{
		var Zeigen = await HoleAlleBestellungen();

		if (Zeigen == null)
		{
			OutputGetPostPutDelete = "Ihre werte sind null, da hat was ned funkt";
		}
		else if (Zeigen.Count > 0)
		{
			foreach (var item in Zeigen)
			{
				OutputGetPostPutDelete += "\nID: " + item.Id + ", Unternehmen: " + item.Unternehmen;
			}
		}
		else
		{
			OutputGetPostPutDelete = "da hat was ned funkt";
		}
	}


	private async void TestenLogOut()
	{
		await SecureStorage.SetAsync("authToken", "1");
		OutputGetPostPutDelete = "Sie haben sich abgemeldet. Ihr Token ist gelöscht";

	}
}