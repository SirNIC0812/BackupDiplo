@page "/Lieferanten"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration
@using Diplomarbeit_HHS.Models
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IJSRuntime JS //Schnittstelle zwischen c# und js

<script src="javaScript/script.js"></script>
<link rel="stylesheet" media="(min-width:0px)" href="style/styleMobile.css" />
<link rel="stylesheet" media="(min-width:1000px)" href="style/style.css" />

<body>
	<header>
		<h1 class="HeaderText">Lieferanten</h1>
	</header>
	<nav>
	</nav>
	<section>
		<article class="AnzeigeDaten">
			<table id ="InhaltOnClick">
				<thead>
					<tr>
						<th class="TableBestellungenID" @onclick="() => SortTable(nameof(Lieferant.lId))">
							ID
							@(currentSortColumn == nameof(Lieferant.lId)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenUnternehmen" @onclick="() => SortTable(nameof(Lieferant.fbNr))">
							FbNr
							@(currentSortColumn == nameof(Lieferant.fbNr)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenBestelldatum" @onclick="() => SortTable(nameof(Lieferant.lieferantenNrSap))">
							LieferantenNrSap
							@(currentSortColumn == nameof(Lieferant.lieferantenNrSap)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenID" @onclick="() => SortTable(nameof(Lieferant.firmenname))">
							Firmenname
							@(currentSortColumn == nameof(Lieferant.firmenname)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenUnternehmen" @onclick="() => SortTable(nameof(Lieferant.suchbegriff))">
							Suchbegriff
							@(currentSortColumn == nameof(Lieferant.suchbegriff)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenBestelldatum" @onclick="() => SortTable(nameof(Lieferant.adresse))">
							Adresse
							@(currentSortColumn == nameof(Lieferant.adresse)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenID" @onclick="() => SortTable(nameof(Lieferant.email))">
							Email
							@(currentSortColumn == nameof(Lieferant.email)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
						<th class="TableBestellungenUnternehmen" @onclick="() => SortTable(nameof(Lieferant.iban))">
							IBAN
							@(currentSortColumn == nameof(Lieferant.iban)
										? (sortAscending ? "↑" : "↓")
										: string.Empty)
						</th>
					</tr>
				</thead>
				<tfoot>
					<!--<tr>
						<td colspan="3">@OutputGetPostPutDelete</td>
					</tr>-->
				</tfoot>
				<tbody id="TableBody">
					@if (lieferanten == null)
					{
						<tr>
							<td colspan="8">Es wird nach den Datensätzen gesucht.</td>
						</tr>
					}
					else if (lieferanten.Count == 0)
					{
						<tr>
							<td colspan="8">Es wurden keine Datensätze gefunden.</td>
						</tr>
					}
					else
					{
						@foreach (var lieferant in lieferanten)
						{
							<tr @onclick="() => GetLieferantById(lieferant.lId)" style="cursor: pointer;" class="@GetRowClass(lieferant.lId)">
								<td>@lieferant.lId</td>
								<td>@lieferant.fbNr</td>
								<td>@lieferant.lieferantenNrSap</td>
								<td>@lieferant.firmenname</td>
								<td>@lieferant.suchbegriff</td>
								<td>@lieferant.adresse</td>
								<td>@lieferant.email</td>
								<td>@lieferant.iban</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</article>
		<article class="AnzeigeInput">
			<div class="LinkesDiv">
				<div id="divEins">
					<label class="divEinsBestellung" for="LId">ID</label>
					<input type="number" name="LId" id="LId" @bind="LId" min="0" class="divEinsBestellung" />
				</div>

				<div id="DivButtons">
					<button id="GETAufgaben" @onclick="GETLieferant">Anzeigen</button>
					<br>
					<button id="POSTAufgaben" @onclick="POSTLieferant">Erstellen</button>
					<br>
					<button id="PUTAufgaben" @onclick="PUTLieferant">Ändern</button>
					<br>
					<button id="DELETEAufgaben" @onclick="DELETELieferant">Löschen</button>
				</div>
			</div>

			<div class="RechtesDiv">
				<div id="divZwei">
					<label class="divZweiBestellung" for="FbNr">FbNr</label>
					<label class="divZweiBestellung" for="LieferantenNrSap">LieferantenNrSap</label>
					<label class="divZweiBestellung" for="Firmenname">Firmenname</label>
					<label class="divZweiBestellung" for="Suchbegriff">Suchbegriff</label>

					<input type="number" @bind="FbNr" name="FbNr" id="Aufgaben" class="divZweiBestellung" />
					<input type="number" @bind="LieferantenNrSap" name="LieferantenNrSap" id="Abgabeterim" class="divZweiBestellung" />
					<input type="text" @bind="Firmenname" name="Firmenname" id="Aufgaben" class="divZweiBestellung" />
					<input type="text" @bind="Suchbegriff" name="Suchbegriff" id="Abgabeterim" class="divZweiBestellung" />
				</div>
				<div id="divDrei">
					<label class="divDreiBestellung" for="Adresse">Adresse</label>
					<label class="divDreiBestellung" for="Email">Email</label>
					<label class="divDreiBestellung" for="Iban">IBAN</label>

					<input type="text" @bind="Adresse" name="Adresse" id="Abgabeterim" class="divDreiBestellung" />
					<input type="text" @bind="Email" name="Email" id="Abgabeterim" class="divDreiBestellung" />
					<input type="text" @bind="Iban" name="Iban" id="Abgabeterim" class="divDreiBestellung" />
				</div>
			</div>
		</article>
	</section>
</body>


@code {

	private string OutputResult = "";
	private string OutputGetPostPutDelete = "";


	public class Lieferant
	{
		public int lId { get; set; }
		public int fbNr { get; set; }
		public int lieferantenNrSap { get; set; }
		public string? firmenname { get; set; }
		public string? suchbegriff { get; set; }
		public string? adresse { get; set; }
		public string? email { get; set; }
		public string? iban { get; set; }
	}

	private int LId;
	private int FbNr;
	private int LieferantenNrSap;
	private string? Firmenname;
	private string? Suchbegriff;
	private string? Adresse;
	private string? Email;
	private string? Iban;
	
	private int lastID;

	private List<Lieferanten.LieferantenInhalt> lieferanten;


	private bool sortAscending = true;
	private string? currentSortColumn;

	private void SortTable(string columnName)
	{
		if (currentSortColumn == columnName)
		{
			sortAscending = !sortAscending; // Toggle sort direction
		}
		else
		{
			currentSortColumn = columnName;
			sortAscending = true;
		}

		if (lieferanten != null)
		{
			lieferanten = columnName switch
			{
				nameof(Lieferant.lId) => sortAscending
					? lieferanten.OrderBy(m => m.lId).ToList()
					: lieferanten.OrderByDescending(m => m.lId).ToList(),
				nameof(Lieferant.fbNr) => sortAscending
					? lieferanten.OrderBy(m => m.fbNr).ToList()
					: lieferanten.OrderByDescending(m => m.fbNr).ToList(),
				nameof(Lieferant.lieferantenNrSap) => sortAscending
					? lieferanten.OrderBy(m => m.lieferantenNrSap).ToList()
					: lieferanten.OrderByDescending(m => m.lieferantenNrSap).ToList(),
				nameof(Lieferant.firmenname) => sortAscending
					? lieferanten.OrderBy(m => m.firmenname).ToList()
					: lieferanten.OrderByDescending(m => m.firmenname).ToList(),
				nameof(Lieferant.suchbegriff) => sortAscending
					? lieferanten.OrderBy(m => m.suchbegriff).ToList()
					: lieferanten.OrderByDescending(m => m.suchbegriff).ToList(),
				nameof(Lieferant.adresse) => sortAscending
					? lieferanten.OrderBy(m => m.adresse).ToList()
					: lieferanten.OrderByDescending(m => m.adresse).ToList(),
				nameof(Lieferant.email) => sortAscending
					? lieferanten.OrderBy(m => m.email).ToList()
					: lieferanten.OrderByDescending(m => m.email).ToList(),
				nameof(Lieferant.iban) => sortAscending
					? lieferanten.OrderBy(m => m.iban).ToList()
					: lieferanten.OrderByDescending(m => m.iban).ToList(),
				_ => lieferanten
			};
		}
	}

	protected override async Task OnInitializedAsync()
	{
		Lieferanten l1 = new Lieferanten();
		lieferanten = await l1.HoleAlleLieferanten();


		HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		HttpResponseMessage GetResponse = await client.GetAsync($"{URLs.URLAufgaben}");

		if (GetResponse.IsSuccessStatusCode)
		{
			var responseBody = await GetResponse.Content.ReadAsStringAsync();
			OutputGetPostPutDelete = "GETALL wurde erfolgreich ausgeführt!";

			foreach (var lieferant in lieferanten)
			{
				lastID = lieferant.lId;
				int newID = lastID + 1;
				LId = newID;
			}
		}
		else
		{
			OutputGetPostPutDelete = "Error TestAPIGET: " + GetResponse.StatusCode;
		}
		JS.InvokeVoidAsync("setLastIDInJS", lastID);

	}


	private int? selectedId; // Speichert die ID der ausgewählten Zeile

	private string GetRowClass(int Id)
	{
		// Rückgabe der CSS-Klasse für die aktuelle Zeile
		return selectedId == Id ? "AusgewaehlteReihe" : "";
	}

	private async void GetLieferantById(int IDNumberEingegeben)
	{
		selectedId = LId; // Aktualisiert die ausgewählte ID

		Lieferanten l2 = new Lieferanten();
		var Lieferant = await l2.HoleLieferantById(IDNumberEingegeben);
		OutputGetPostPutDelete = Convert.ToString(Lieferant);

		if (Lieferant == null)
		{
			OutputGetPostPutDelete = "Ihre werte sind null, da hat was ned funkt";
		}
		else
		{
			LId = Lieferant.lId;
			FbNr = Lieferant.fbNr;
			LieferantenNrSap= Lieferant.lieferantenNrSap;
			Firmenname = Lieferant.firmenname;
			Suchbegriff = Lieferant.suchbegriff;
			Adresse = Lieferant.adresse;
			Email = Lieferant.email;
			Iban = Lieferant.iban;
		}
	}


	public async Task GETLieferant()
	{
		GetLieferantById(LId);
		OutputGetPostPutDelete = "GET wurde erfolgreich ausgeführt!";
	}


	public async Task POSTLieferant()
	{
		Lieferanten l3 = new Lieferanten();
		await l3.PostKunde(LId, FbNr, LieferantenNrSap, Firmenname, Suchbegriff, Adresse, Email, Iban);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "POST wurde erfolgreich ausgeführt!";
	}


	public async Task PUTLieferant()
	{
		Lieferanten l4 = new Lieferanten();
		await l4.PutKunde(LId, FbNr, LieferantenNrSap, Firmenname, Suchbegriff, Adresse, Email, Iban);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "PUT wurde erfolgreich ausgeführt!";
	}


	public async Task DELETELieferant()
	{
		Lieferanten l5 = new Lieferanten();
		await l5.DeleteKunde(LId);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "DELETE wurde erfolgreich ausgeführt!";
	}

}