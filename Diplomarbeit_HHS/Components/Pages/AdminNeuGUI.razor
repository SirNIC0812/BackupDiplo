@page "/adminneugui"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration
@using Diplomarbeit_HHS.Models
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IJSRuntime JS //Schnittstelle zwischen c# und js

<script src="javaScript/script.js"></script>
<link href="style/style.css" rel="stylesheet" />
<body>
	<header>
		<img src="img/Logo_BHAK10.jpg" alt="BhakWien10Schullogo" class="Bild" id="HeaderPicture" />
		<h1 id="HeaderText">Adminansicht GUI</h1>
		<button @onclick="LogOut" id="HeaderLogout">Logout</button>
	</header>
	<nav>
	</nav>
	<section>
		<article class="AnzeigeDaten">
			<!--<p>@OutputResult</p>

			<h3>Test Appsettings</h3>-->

			<table>
				<thead>
					<tr>
						<th class="TableBestellungenID">ID</th>
						<th class="TableBestellungenUnternehmen">Unternehmen</th>
						<th class="TableBestellungenFertig"><span>✔</span></th>
						<th class="TableBestellungenAnzahl">Anzahl</th>
						<th class="TableBestellungenNetto">Netto</th>
						<th class="TableBestellungenSteuer">Steuer</th>
						<th class="TableBestellungenBrutto">Brutto</th>
					</tr>
				</thead>
				<tfoot>
					<tr>
						<td colspan="7">@OutputGetPostPutDelete</td>
					</tr>
				</tfoot>
				<tbody id="TableBody">
					@if (bestellungen == null)
					{
						<tr>
							<td>Es wird nach den Datensätzen gesucht.</td>
						</tr>
					}
					else if (bestellungen.Count == 0)
					{
						<tr>
							<td>Es wurden keine Datensätze gefunden.</td>
						</tr>
					}
					else
					{
						@foreach (var bestellung in bestellungen)
						{
							<tr>
								<td class="TableBestellungenID">@bestellung.bId</td>
								<td class="TableBestellungenUnternehmen">@bestellung.unternehmen</td>
								<td class="TableBestellungenFertig">
									@if (bestellung.isComplete)
									{
										<span>✔</span>
									}
								</td>
								<td class="TableBestellungenAnzahl">@bestellung.anzahl</td>
								<td class="TableBestellungenNetto">@bestellung.netto</td>
								<td class="TableBestellungenSteuer">@bestellung.steuer</td>
								<td class="TableBestellungenBrutto">@bestellung.brutto</td>
							</tr>
						}
					}
					<!--<tr>
						<td class="TestTableUntenTest">@IDNumber</td>
						<td class="TestTableUntenTest">@Unternehmen</td>
						<td class="TestTableUntenTest">@IsComplete</td>
						<td class="TestTableUntenTest">@Anzahl</td>
						<td class="TestTableUntenTest">@Netto</td>
						<td class="TestTableUntenTest">@Steuer</td>
						<td class="TestTableUntenTest">@Brutto</td>
					</tr>-->
				</tbody>
			</table>
		</article>
		<article>
			<div id="divEins">
				<label for="IDNumber">ID</label>
				<input type="number" name="IDNumber" id="IDNumber" @bind="IDNumber" min="0" />
			</div>

			<div id="divZwei">
				<label class="divZweiBestellung" for="Bestelldatum">Bestelldatum</label>
				<input type="date" name="Bestelldatum" id="Bestelldatum" class="divZweiBestellung" />
				
				<label class="divZweiBestellung" for="Unternehmen">Beschreibung</label>
				<input type="text" @bind="Unternehmen" name="Unternehmen" id="Unternehmen" class="divZweiBestellung" />

				<label class="divZweiBestellung" for="Zahlungsart">Zahlungsart</label>
				<select name="Zahlungsart" id="Zahlungsart" class="divZweiBestellung">
					<option value="BK" selected="selected">Bankomartkarte</option>
					<option value="KK">Kreditkarte</option>
				</select>

				<label class="divZweiBestellung" for="IsComplete">Fertig</label>
				<input type="checkbox" @bind="IsComplete" name="IsComplete" id="IsComplete" class="divZweiBestellung" />
			</div>


			<!--<div id="DivGetAll">
				<button id="GETALLBestellungen" @onclick="TestAPIGETALL">Zeig alle Bestellungen an</button>
			</div>
			<div id="DivGet">
				<button id="GETBestellungen" @onclick="TestAPIGET">Zeige eine Bestellung an</button>
			</div>
			<div id="DivGetPost">
				<button id="POSTBestellungen" @onclick="TestAPIPOST">Erstellen</button>
			</div>
			<div id="DivGetPut">
				<button id="PUTBestellungen" @onclick="TestAPIPUT">Ändern</button>
			</div>
			<div id="DivGetDelete">
				<button id="DELETEBestellungen" @onclick="TestAPIDELETE">Löschen</button>
			</div>-->

			<div id="DivButtons">
				<button id="GETALLBestellungen" @onclick="TestAPIGETALL">Alle Bestellungen</button>
				<br>
				<button id="GETBestellungen" @onclick="TestAPIGET">Anzeigen</button>
				<br>
				<button id="POSTBestellungen" @onclick="TestAPIPOST">Erstellen</button>
				<br>
				<button id="PUTBestellungen" @onclick="TestAPIPUT" class="Hide">Ändern</button>
				<br>
				<button id="DELETEBestellungen" @onclick="TestAPIDELETE" >Löschen</button>
			</div>


			<div id="divDrei">
				<label class="divZweiBestellung" for="BestellNrLieferant">BestellNrLieferant</label>
				<input type="text" name="BestellNrLieferant" id="BestellNrLieferant" class="divZweiBestellung" />

				<label class="divZweiBestellung" for="UUID">UUID</label>
				<input type="text" name="UUID" id="UUID" class="divZweiBestellung" />

				<label class="divZweiBestellung" for="LID">LID</label>
				<input type="text" name="LID" id="LID" class="divZweiBestellung" />
				
			</div>

			<div id="divVier">
				<label class="divZweiBestellung" for="Anzahl">Anzahl</label>
				<input type="number" @bind="Anzahl" name="Anzahl" id="Anzahl" class="divZweiBestellung" />

				<label class="divZweiBestellung" for="Netto">Netto</label>
				<input type="number" @bind="Netto" name="Netto" id="Netto" class="divZweiBestellung" />

				<label class="divZweiBestellung" for="Steuer">Steuer</label>
				<input type="number" @bind="Steuer" name="Steuer" id="Steuer" class="divZweiBestellung"/>

				<label class="divZweiBestellung" for="Brutto">Brutto</label>
				<input type="number" @bind="Brutto" name="Brutto" id="Brutto" class="divZweiBestellung" />

				<button id="BruttoNettoRechnerBestellungen" @onclick="NettoSteuerBruttoErgebnis">Netto-zu-Brutto Rechner</button>
				<p id="AusgabeTest">@NettoSteuerBrutto</p>
			</div>

			<!--
				<table id="TestTableAllesAnzeigen">
				<thead>
					<tr>
						<th class="TestTableUntenTest">ID</th>
						<th class="TestTableUntenTest">Unternehmen</th>
						<th class="TestTableUntenTest">Ist Fertig</th>
						<th class="TestTableUntenTest">Anzahl</th>
						<th class="TestTableUntenTest">Netto</th>
						<th class="TestTableUntenTest">Steuer</th>
						<th class="TestTableUntenTest">Brutto</th>
					</tr>
				</thead>
				<tfoot>
				</tfoot>
				<tbody>
					<tr>
						<td class="TestTableUntenTest"><input type="number" @bind="IDNumber" name="IDNumber" id="IDNumber"/></td>
						--><!-- atbind="zahl" dient dazu das der Wert vom Input-Feld direkt syncronisiert wird mit er Variable "zahl"" in C#--><!--
						<td class="TestTableUntenTest"><input type="text" @bind="Unternehmen" name="Unternehmen" id="Unternehmen" /></td>
						<td class="TestTableUntenTest"><input type="checkbox" @bind="IsComplete" name="IsComplete" id="IsComplete" /></td>
						<td class="TestTableUntenTest"><input type="number" @bind="Anzahl" name="Anzahl" id="Anzahl" /></td>
						<td class="TestTableUntenTest"><input type="number" @bind="Netto" name="Netto" id="Netto" /></td>
						<td class="TestTableUntenTest"><input type="number" @bind="Steuer" name="Steuer" id="Steuer" /></td>
						<td class="TestTableUntenTest"><input type="number" @bind="Brutto" name="Brutto" id="Brutto" /></td>
					</tr>
				</tbody>
			</table>-->
		</article>
	</section>
</body>


@code {

	private string Username = "TestAdmin";
	private string UEFA = "Udesigndea";
	private string NettoSteuerBrutto = "";
	private string OutputResult = "";
	private string OutputGetPostPutDelete = "";

	public class DIP
	{
		public int bId { get; set; }
		public string? unternehmen { get; set; }
		public Boolean isComplete { get; set; }
		public int anzahl { get; set; }
		public double netto { get; set; }
		public double steuer { get; set; }
		public double brutto { get; set; }
	}

	private int IDNumber;
	private string? Unternehmen;
	private Boolean IsComplete;
	private int Anzahl;
	private double Netto;
	private double Steuer;
	private double Brutto;


	public async Task NettoSteuerBruttoErgebnis()
	{
		double netto = Netto;

		NettoSteuerBrutto NewNettoSteuerBrutto = new NettoSteuerBrutto();
		string zahlen = Convert.ToString(await NewNettoSteuerBrutto.NettoBruttoRechnerRechnen(netto));
		NettoSteuerBrutto = zahlen;
		Steuer = await NewNettoSteuerBrutto.NettoSteuer(netto);
		Brutto = await NewNettoSteuerBrutto.NettoBrutto(netto);
	}


	private int lastID;

	private List<Einkauf.DIP> bestellungen;

	protected override async Task OnInitializedAsync()
	{
		Einkauf e1 = new Einkauf();
		bestellungen = await e1.HoleAlleBestellungen();

		HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		HttpResponseMessage GetResponse = await client.GetAsync($"{URLs.URLEinkaufBestellung}");

		if (GetResponse.IsSuccessStatusCode)
		{
			var responseBody = await GetResponse.Content.ReadAsStringAsync();
			//OutputResult = responseBody;
			OutputGetPostPutDelete = "GETALL wurde erfolgreich ausgeführt!";

			foreach (var bestellung in bestellungen)
			{
				lastID = bestellung.bId;
				int newID = lastID + 1;
				IDNumber = newID;
			}
		}
		else
		{
			OutputGetPostPutDelete = "Error TestAPIGET: " + GetResponse.StatusCode;
		}

		JS.InvokeVoidAsync("setLastIDInJS", lastID);

	}


	public async Task TestAPIGETALL()
	{
		HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		HttpResponseMessage GetResponse = await client.GetAsync($"{URLs.URLEinkaufBestellung}");

		if (GetResponse.IsSuccessStatusCode){
			var responseBody = await GetResponse.Content.ReadAsStringAsync();
			OutputGetPostPutDelete = "GETALL wurde erfolgreich ausgeführt!";
		} else {
			OutputGetPostPutDelete = "Error TestAPIGET: " + GetResponse.StatusCode;
		}
	}

	/*public async Task<DIP> HoleBestellungById(int id)
		{
		HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		//Der obrige code bleibt immer gleich (Klasse erstellen ig)
		HttpResponseMessage GetResponse = await client.GetAsync($"{URLs.URLEinkaufBestellung}/{IDNumber}");
		//OutputGetPostPutDelete = $"{URLs.URLEinkaufBestellung}/{IDNumber}";

		if (GetResponse.IsSuccessStatusCode)
			{
			var responseBody = await GetResponse.Content.ReadAsStringAsync();
			DIP bestellung = JsonSerializer.Deserialize<DIP>(responseBody);
			return bestellung;
			}
			else
			{
			OutputGetPostPutDelete = "Error TestAPIGET: " + GetResponse.StatusCode;
	return null;
	}
	}*/

	//Es ist nicht anders möglich; möchte ja wenn ich es gette das die Daten in die Felder eingefügt werden
	private async void GetBestellungById(int IDNumber)
	{
		Einkauf e2 = new Einkauf();
		var Bestellung = await e2.HoleBestellungById(IDNumber);
		//var Bestellung = await HoleBestellungById(IDNumber);
		OutputGetPostPutDelete = Convert.ToString(Bestellung);


		if (Bestellung == null)
		{
			OutputGetPostPutDelete = "Ihre werte sind null, da hat was ned funkt";
		}
		else
		{
			Unternehmen = Bestellung.unternehmen;
			IsComplete = Bestellung.isComplete;
			Anzahl = Bestellung.anzahl;
			Netto = Bestellung.netto;
			Steuer = Bestellung.steuer;
			Brutto = Bestellung.brutto;
		}
	}

	public async Task TestAPIGET()
	{
		/*Einkauf e2 = new Einkauf();
		var getbestellungid = await e2.GetBestellungById(IDNumber);
		OutputGetPostPutDelete = "GET wurde erfolgreich ausgeführt!";*/
		GetBestellungById(IDNumber);
		OutputGetPostPutDelete = "GET wurde erfolgreich ausgeführt!";
	}




	public async Task TestAPIPOST()
	{
		/*HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		//Problem liegt derweil bei der Id, muss immer die nächste Zahl selber eingeben sonst error; auch irgendwie zahlen funkt nicht so wirklich

		DIP newDIP = new DIP { id = IDNumber, unternehmen = Unternehmen, isComplete = IsComplete, anzahl = Anzahl, netto = Netto, steuer = Steuer, brutto = Brutto };
		string jsonData = JsonSerializer.Serialize(newDIP);
		var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
		HttpResponseMessage response = await client.PostAsync($"{URLs.URLEinkaufBestellung}/", content);

		if (response.IsSuccessStatusCode)
			{
			var responseBody = await response.Content.ReadAsStringAsync();
			OutputResult = responseBody;
			OutputGetPostPutDelete = "POST wurde erfolgreich ausgeführt!";
		}
		else
			{
			OutputGetPostPutDelete = "Error TestAPIPOST: " + response.StatusCode;
		}*/

		Einkauf e3 = new Einkauf();
		
		OutputGetPostPutDelete = ""+e3.PostBestellung(IDNumber, Unternehmen, IsComplete, Anzahl, Netto, Steuer, Brutto);
		//OutputGetPostPutDelete = "POST wurde erfolgreich ausgeführt!";
	}




	public async Task TestAPIPUT()
	{
		/*HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		DIP newDIP = new DIP { id = IDNumber, unternehmen = Unternehmen, isComplete = IsComplete, anzahl = Anzahl, netto = Netto, steuer = Steuer, brutto = Brutto };
		string jsonData = JsonSerializer.Serialize(newDIP);
		var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
		HttpResponseMessage response = await client.PutAsync($"{URLs.URLEinkaufBestellung}/{IDNumber}", content);

		if (response.IsSuccessStatusCode)
			{
			var responseBody = await response.Content.ReadAsStringAsync();
			OutputResult = responseBody;
			OutputGetPostPutDelete = "PUT wurde erfolgreich ausgeführt!";
		}
		else
			{
			OutputGetPostPutDelete = "Error TestAPIPUT: " + response.StatusCode;
		}*/

		Einkauf e4 = new Einkauf();
		e4.PutBestellung(IDNumber, Unternehmen, IsComplete, Anzahl, Netto, Steuer, Brutto);
		OutputGetPostPutDelete = "PUT wurde erfolgreich ausgeführt!";

	}


	public async Task TestAPIDELETE()
	{
		/*HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		HttpResponseMessage response = await client.DeleteAsync($"{URLs.URLEinkaufBestellung}/{IDNumber}"); //Ich kann die ID 1 nicht löschen --> gewollt ja/nein

		if (response.IsSuccessStatusCode)
			{
			var responseBody = await response.Content.ReadAsStringAsync();
			OutputResult = responseBody;
			OutputGetPostPutDelete = "DELETE wurde erfolgreich ausgeführt!";
		}
		else
			{
			OutputGetPostPutDelete = "Error TestAPIDELETE: " + response.StatusCode;
		}*/

		Einkauf e5 = new Einkauf();
		e5.DeleteBestellung(IDNumber);
		OutputGetPostPutDelete = "DELETE wurde erfolgreich ausgeführt!";
	}


	private async void LogOut()
	{
		await SecureStorage.SetAsync("authToken", "1");
		OutputGetPostPutDelete = "Sie haben sich abgemeldet. Ihr Token ist gelöscht";

		var token = await SecureStorage.GetAsync("authToken");
		if (token == "1")
		{
			Navigation.NavigateTo("/");
		}
		else
		{
			OutputGetPostPutDelete = "Irgendwas hat beim Logout nicht funktioniert!";
		}
	}
}