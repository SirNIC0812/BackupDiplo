@page "/EinkaufBestellungen"
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration
@using Diplomarbeit_HHS.Models
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject IJSRuntime JS //Schnittstelle zwischen c# und js

<script src="javaScript/script.js"></script>
<link rel="stylesheet" media="(min-width:0px)" href="style/styleMobile.css" />
<link rel="stylesheet" media="(min-width:1000px)" href="style/style.css" />

<body>
	<header>
		<h1 class="HeaderText">Bestellungen</h1>
	</header>
	<nav>
	</nav>
	<section>
		<article class="AnzeigeDaten">
			<table id ="InhaltOnClick">
				<thead>
					<tr>
						<th class="TableBestellungenID" @onclick="() => SortTable(nameof(DIP.bId))">
							ID
							@(currentSortColumn == nameof(DIP.bId)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenUnternehmen" @onclick="() => SortTable(nameof(DIP.beschreibung))">
							Unternehmen
							@(currentSortColumn == nameof(DIP.beschreibung)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenBestelldatum" @onclick="() => SortTable(nameof(DIP.bestelldatum))">
							Bestelldatum
							@(currentSortColumn == nameof(DIP.bestelldatum)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenFertig" @onclick="() => SortTable(nameof(DIP.isComplete))">
							<span>✔</span>
							@(currentSortColumn == nameof(DIP.isComplete)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenAnzahl" @onclick="() => SortTable(nameof(DIP.anzahl))">
							Anzahl
							@(currentSortColumn == nameof(DIP.anzahl)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenNetto" @onclick="() => SortTable(nameof(DIP.netto))">
							Netto
							@(currentSortColumn == nameof(DIP.netto)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenSteuer" @onclick="() => SortTable(nameof(DIP.steuer))">
							Steuer
							@(currentSortColumn == nameof(DIP.steuer)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
						<th class="TableBestellungenBrutto" @onclick="() => SortTable(nameof(DIP.brutto))">
							Brutto
							@(currentSortColumn == nameof(DIP.brutto)
														? (sortAscending ? "↑" : "↓")
														: string.Empty)
						</th>
					</tr>
				</thead>
				<tfoot>
					<!--<tr>
						<td colspan="8">@OutputGetPostPutDelete</td>
					</tr>-->
				</tfoot>
				<tbody id="TableBody">
					@if (bestellungen == null)
					{
						<tr>
							<td colspan="8">Es wird nach den Datensätzen gesucht.</td>
						</tr>
					}
					else if (bestellungen.Count == 0)
					{
						<tr>
							<td colspan="8">Es wurden keine Datensätze gefunden.</td>
						</tr>
					}
					else
					{
						@foreach (var bestellung in bestellungen)
						{
							<tr @onclick="() => GetBestellungById(bestellung.bId)" style="cursor: pointer;" class="@GetRowClass(bestellung.bId)">
								<td class="TableBestellungenID">@bestellung.bId</td>
								<td class="TableBestellungenUnternehmen">@bestellung.beschreibung</td>
								<td class="TableBestellungenBestelldatum">@bestellung.bestelldatum.Value.ToString("yyyy-MM-dd")</td>
								<td class="TableBestellungenFertig">
									@if (bestellung.isComplete)
									{
										<span>✔</span>
									}
								</td>
								<td class="TableBestellungenAnzahl">@bestellung.anzahl</td>
								<td class="TableBestellungenNetto">@bestellung.netto</td>
								<td class="TableBestellungenSteuer">@bestellung.steuer</td>
								<td class="TableBestellungenBrutto">@bestellung.brutto</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</article>
		<article class="AnzeigeInput">
			<div class="LinkesDiv">
				<div id="divEins">
					<label class="divEinsBestellung" for="IDNumber">ID</label>
					<input type="number" name="IDNumber" id="IDNumber" @bind="IDNumber" min="0" class="divEinsBestellung" />
				</div>

				<div id="DivButtons">
					<button id="GETBestellungen" @onclick="GETEinkaufBestellung">Anzeigen</button>
					<br>
					<button id="POSTBestellungen" @onclick="POSTEinkaufBestellung">Erstellen</button>
					<br>
					<button id="PUTBestellungen" @onclick="PUTEinkaufBestellung">Ändern</button>
					<br>
					<button id="DELETEBestellungen" @onclick="DELETEEinkaufBestellung">Löschen</button>
				</div>
			</div>

			<div class="RechtesDiv">
				<div id="divZwei">
					<label class="divZweiBestellung" for="Bestelldatum">Bestelldatum</label>
					<label class="divZweiBestellung" for="Beschreibung">Beschreibung</label>
					<label class="divZweiBestellung" for="Zahlungsart">Zahlungsart</label>
					<label class="divZweiBestellung" for="IsComplete">Fertig</label>

					<input type="date" @bind="Bestelldatum" name="Bestelldatum" id="Bestelldatum" class="divZweiBestellung" />
					<input type="text" @bind="Beschreibung" name="Beschreibung" id="Beschreibung" class="divZweiBestellung" />
					<select @bind="Zahlungsart" name="Zahlungsart" id="Zahlungsart" class="divZweiBestellung">
						<option value="BK" selected="selected">Bankomartkarte</option>
						<option value="KK">Kreditkarte</option>
					</select>
					<input type="checkbox" @bind="IsComplete" name="IsComplete" id="IsComplete" class="divZweiBestellung" />
				</div>
				<div id="divDrei">
					<label class="divDreiBestellung" for="BestellNrLieferant">Lieferantennr</label>
					<label class="divDreiBestellung" for="UUID">UUID</label>
					<label class="divDreiBestellung" for="LID">LID</label>

					<input type="number" @bind="BestellNRLieferant" name="BestellNrLieferant" id="BestellNrLieferant" class="divDreiBestellung" />
					<input type="number" @bind="Uiid" name="UUID" id="UUID" class="divDreiBestellung" />
					<input type="number" @bind="Lid" name="LID" id="LID" class="divDreiBestellung" />
				</div>

				<div id="divVier">
					<label class="divVierBestellung" for="Anzahl">Anzahl</label>
					<label class="divVierBestellung" for="Netto">Netto</label>
					<label class="divVierBestellung" for="Steuer">Steuer</label>
					<label class="divVierBestellung" for="Brutto">Brutto</label>
					<label class="divVierBestellung" for="Skonto">Skonto</label>

					<input type="number" @bind="Anzahl" name="Anzahl" id="Anzahl" class="divVierBestellung" />
					<input type="number" @bind="Netto" name="Netto" id="Netto" class="divVierBestellung" />
					<input type="number" @bind="Steuer" name="Steuer" id="Steuer" class="divVierBestellung" />
					<input type="number" @bind="Brutto" name="Brutto" id="Brutto" class="divVierBestellung" />
					<input type="number" @bind="Skonto" name="Skonto" id="Skonto" class="divVierBestellung" />


					<button id="BruttoNettoRechnerBestellungen" @onclick="NettoSteuerBruttoErgebnis">Netto-zu-Brutto Rechner</button>
					<p id="AusgabeTest">@NettoSteuerBrutto</p>
				</div>
			</div>
		</article>
	</section>
</body>


@code {

	private string NettoSteuerBrutto = "";
	private string OutputResult = "";
	private string OutputGetPostPutDelete = "";

	public class DIP
	{
		public int bId { get; set; }
		public DateTime? bestelldatum { get; set; }
		public string? beschreibung { get; set; }
		public string? zahlungsart { get; set; }
		public int bestellNRLieferant { get; set; }
		public int uiid { get; set; }
		public int lid { get; set; }
		public int anzahl { get; set; }
		public double netto { get; set; }
		public double steuer { get; set; }
		public double skonto { get; set; }
		public double brutto { get; set; }
		public Boolean isComplete { get; set; }
	}

	private int IDNumber;
	private DateTime? Bestelldatum;
	private string? Beschreibung;
	private string? Zahlungsart;
	private int BestellNRLieferant;
	private int Uiid;
	private int Lid;
	private int Anzahl;
	private double Netto;
	private double Steuer;
	private double Skonto;
	private double Brutto;
	private Boolean IsComplete;

	private int lastID;
	private List<Einkauf.DIP> bestellungen;

	private bool sortAscending = true;
	private string? currentSortColumn;

	private void SortTable(string columnName)
	{
		if (currentSortColumn == columnName)
		{
			sortAscending = !sortAscending; // Toggle sort direction
		}
		else
		{
			currentSortColumn = columnName;
			sortAscending = true;
		}

		if (bestellungen != null)
		{
			bestellungen = columnName switch
			{
				nameof(DIP.bId) => sortAscending
					? bestellungen.OrderBy(m => m.bId).ToList()
					: bestellungen.OrderByDescending(m => m.bId).ToList(),
				nameof(DIP.bestelldatum) => sortAscending
					? bestellungen.OrderBy(m => m.bestelldatum).ToList()
					: bestellungen.OrderByDescending(m => m.bestelldatum).ToList(),
				nameof(DIP.beschreibung) => sortAscending
					? bestellungen.OrderBy(m => m.beschreibung).ToList()
					: bestellungen.OrderByDescending(m => m.beschreibung).ToList(),
				nameof(DIP.isComplete) => sortAscending
					? bestellungen.OrderBy(m => m.isComplete).ToList()
					: bestellungen.OrderByDescending(m => m.isComplete).ToList(),
				nameof(DIP.anzahl) => sortAscending
					? bestellungen.OrderBy(m => m.anzahl).ToList()
					: bestellungen.OrderByDescending(m => m.anzahl).ToList(),
				nameof(DIP.netto) => sortAscending
					? bestellungen.OrderBy(m => m.netto).ToList()
					: bestellungen.OrderByDescending(m => m.netto).ToList(),
				nameof(DIP.steuer) => sortAscending
					? bestellungen.OrderBy(m => m.steuer).ToList()
					: bestellungen.OrderByDescending(m => m.steuer).ToList(),
				nameof(DIP.brutto) => sortAscending
					? bestellungen.OrderBy(m => m.brutto).ToList()
					: bestellungen.OrderByDescending(m => m.brutto).ToList(),
				_ => bestellungen
			};
		}
	}



	public async Task NettoSteuerBruttoErgebnis()
	{
		double netto = Netto;

		NettoSteuerBrutto NewNettoSteuerBrutto = new NettoSteuerBrutto();
		string zahlen = Convert.ToString(await NewNettoSteuerBrutto.NettoBruttoRechnerRechnen(netto));
		NettoSteuerBrutto = zahlen;
		Steuer = await NewNettoSteuerBrutto.NettoSteuer(netto);
		Brutto = await NewNettoSteuerBrutto.NettoBrutto(netto);		
	}



	protected override async Task OnInitializedAsync()
	{
		Einkauf e1 = new Einkauf();
		bestellungen = await e1.HoleAlleBestellungen();

		HttpClient client = new HttpClient();
		var token = await SecureStorage.GetAsync("authToken");
		client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		HttpResponseMessage GetResponse = await client.GetAsync($"{URLs.URLEinkaufBestellung}");

		if (GetResponse.IsSuccessStatusCode)
		{
			var responseBody = await GetResponse.Content.ReadAsStringAsync();
			//OutputResult = responseBody;
			OutputGetPostPutDelete = "GETALL wurde erfolgreich ausgeführt!";

			foreach (var bestellung in bestellungen)
			{
				lastID = bestellung.bId;
				int newID = lastID + 1;
				IDNumber = newID;
			}
		}
		else
		{
			OutputGetPostPutDelete = "Error TestAPIGET: " + GetResponse.StatusCode;
		}
		JS.InvokeVoidAsync("setLastIDInJS", lastID);
	}


	private int? selectedId; // Speichert die ID der ausgewählten Zeile

	private string GetRowClass(int Id)
	{
		// Rückgabe der CSS-Klasse für die aktuelle Zeile
		return selectedId == Id ? "AusgewaehlteReihe" : "";
	}

	private async void GetBestellungById(int IDNumberEingegeben)
	{
		selectedId = IDNumber; // Aktualisiert die ausgewählte ID

		Einkauf e2 = new Einkauf();
		var Bestellung = await e2.HoleBestellungById(IDNumberEingegeben);
		OutputGetPostPutDelete = Convert.ToString(Bestellung);

		if (Bestellung == null)
		{
			OutputGetPostPutDelete = "Ihre werte sind null, da hat was ned funkt";
		}
		else
		{
			IDNumber = Bestellung.bId;
			Bestelldatum = Bestellung.bestelldatum;
			Beschreibung = Bestellung.beschreibung;
			Zahlungsart = Bestellung.zahlungsart; ;
			BestellNRLieferant = Bestellung.bestellNRLieferant;
			Uiid = Bestellung.uiid;
			Lid = Bestellung.lid;
			Anzahl = Bestellung.anzahl;
			Netto = Bestellung.netto;
			Steuer = Bestellung.steuer;
			Skonto = Bestellung.skonto;
			Brutto = Bestellung.brutto;
			IsComplete = Bestellung.isComplete;
		}
	}


	public async Task GETEinkaufBestellung()
	{
		GetBestellungById(IDNumber);
		OutputGetPostPutDelete = "GET wurde erfolgreich ausgeführt!";
	}


	public async Task POSTEinkaufBestellung()
	{
		Einkauf e3 = new Einkauf();
		await e3.PostBestellung(IDNumber, Bestelldatum, Beschreibung, Zahlungsart, BestellNRLieferant, Uiid, Lid, Anzahl, Netto, Steuer, Skonto, Brutto, IsComplete);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "POST wurde erfolgreich ausgeführt!";
	}


	public async Task PUTEinkaufBestellung()
	{
		Einkauf e4 = new Einkauf();
		await e4.PutBestellung (IDNumber, Bestelldatum, Beschreibung, Zahlungsart, BestellNRLieferant, Uiid, Lid, Anzahl, Netto, Steuer, Skonto, Brutto, IsComplete);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "PUT wurde erfolgreich ausgeführt!";
	}


	public async Task DELETEEinkaufBestellung()
	{
		Einkauf e5 = new Einkauf();
		await e5.DeleteBestellung(IDNumber);
		await OnInitializedAsync();
		OutputGetPostPutDelete = "DELETE wurde erfolgreich ausgeführt!";
	}


	private async void LogOut()
	{
		await SecureStorage.SetAsync("authToken", "1");
		OutputGetPostPutDelete = "Sie haben sich abgemeldet. Ihr Token ist gelöscht";

		var token = await SecureStorage.GetAsync("authToken");
		if (token == "1")
		{
			Navigation.NavigateTo("/");
		}
		else
		{
			OutputGetPostPutDelete = "Irgendwas hat beim Logout nicht funktioniert!";
		}
	}
}